{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPn2PJKZ3C5JE043RxSJt9L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from abc import abstractmethod, ABC\n","import threading as th\n","import time"],"metadata":{"id":"Ux72hPx8ZcIt","executionInfo":{"status":"ok","timestamp":1698595826591,"user_tz":180,"elapsed":327,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["### Atividade 01\n","Suponha que seu back-end esteja ativo. Durante algum momento, foram lançadas algumas exceções. No\n","final das contas, essas exceções devem ser inseridas no banco de dados e analisadas. Para este cenário,\n","precisamos manter um único objeto (Fila de Exceções) para armazenar Exceções lançadas de várias\n","Classes, em vez de instanciar uma nova Fila de Exceções todas as vezes. A estrutura do seu projeto\n","deverá ficar assim (ver figura abaixo)."],"metadata":{"id":"9YqqMwePn7Qu"}},{"cell_type":"markdown","source":["---\n","classe Singleton\n","\n","---"],"metadata":{"id":"Hy3YkttPk87u"}},{"cell_type":"code","source":["class Logger():\n","    _instancia = None\n","    _excecoes = []\n","\n","    def __new__(self):\n","        if self._instancia is None:\n","            self._instancia = super(Logger, self).__new__(self)\n","        return self._instancia\n","\n","    def logExc(self, excecao):\n","        self._excecoes.append(excecao)\n","\n","    def analisaExc(self):\n","        for excecao in self._excecoes:\n","            print(f\"Analisando exceção: {excecao}\")"],"metadata":{"id":"910fV-iNk8j8","executionInfo":{"status":"ok","timestamp":1698595826961,"user_tz":180,"elapsed":36,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["---\n","classe Driver\n","\n","---"],"metadata":{"id":"P0OyyuQVlzWM"}},{"cell_type":"code","source":["class SingletonDriver:\n","    def run(self):\n","        logger = Logger()\n","        logger.logExc(\"Exceção 1\")\n","        logger.logExc(\"Exceção 2\")\n","        logger.analisaExc()"],"metadata":{"id":"AhJruJOmkfmH","executionInfo":{"status":"ok","timestamp":1698595826962,"user_tz":180,"elapsed":33,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["---\n","teste Cliente\n","\n","---"],"metadata":{"id":"lb77Uyfil6Ck"}},{"cell_type":"code","source":["driver = SingletonDriver()\n","driver.run()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jxo6noHqkYaQ","executionInfo":{"status":"ok","timestamp":1698595826962,"user_tz":180,"elapsed":31,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}},"outputId":"6eb080ee-8899-40da-e11f-f438255bbb24"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Analisando exceção: Exceção 1\n","Analisando exceção: Exceção 2\n"]}]},{"cell_type":"markdown","source":["### Atividade 02\n","\n","Crie um servidor “Singleton“. Ele deve armazenar a lista de servidores (como String). Implemente as\n","seguintes funcionalidades:\n","• adicionando um servidor à lista\n","• um método que adiciona o servidor à lista deve retornar booleano (verdadeiro se o servidor tiver sido\n","adicionado à lista, falso caso contrário)\n","\n","• adicionar é possível, se seu nome começar com http ou https\n","\n","• adicionar um nome duplicado é impossível.\n","\n","• baixando uma lista de servidores, cujos nomes começam em http.\n","\n","• baixando uma lista de servidores, cujos nomes começam em https."],"metadata":{"id":"7X3bPw_OnVGR"}},{"cell_type":"markdown","source":["---\n","class Singleton\n","\n","---"],"metadata":{"id":"udA6d6obn2iZ"}},{"cell_type":"code","source":["class SingleServer():\n","    _instancia = None\n","    _listaServidor = []\n","\n","    def __new__(self):\n","        if self._instancia is None:\n","            self._instancia = super(SingleServer, self).__new__(self)\n","        return self._instancia\n","\n","    def addServidor(self, nome):\n","        if nome.startswith(\"http\") or nome.startswith(\"https\"):\n","            if nome not in self._listaServidor:\n","                self._listaServidor.append(nome)\n","                return True\n","        return False\n","\n","    def getHttp(self):\n","        return [servidor for servidor in self._listaServidor if servidor.startswith(\"http:\")]\n","\n","    def getHttps(self):\n","        return [servidor for servidor in self._listaServidor if servidor.startswith(\"https\")]\n"],"metadata":{"id":"USPvWPvDn19D","executionInfo":{"status":"ok","timestamp":1698595826963,"user_tz":180,"elapsed":27,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["---\n","teste Cliente\n","\n","---"],"metadata":{"id":"Mf7MzTUmonES"}},{"cell_type":"code","source":["servidorzinho = SingleServer()\n","servidorzinho.addServidor(\"http://exemplo1.com\")\n","servidorzinho.addServidor(\"https://exemplo2.org\")\n","servidorzinho.addServidor(\"ftp://exemplo3.com\")\n","servidorzinho.addServidor(\"http://exemplo4.com.br\")\n","\n","servidorzinho_http = servidorzinho.getHttp()\n","servidorzinho_https = servidorzinho.getHttps()\n","\n","print(\"HTTP Servers:\", servidorzinho_http)\n","print(\"HTTPS Servers:\", servidorzinho_https)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pCf1ioCtop1u","executionInfo":{"status":"ok","timestamp":1698595826964,"user_tz":180,"elapsed":27,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}},"outputId":"4760c155-9f2c-471d-e381-3faaa636cf8a"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["HTTP Servers: ['http://exemplo1.com', 'http://exemplo4.com.br']\n","HTTPS Servers: ['https://exemplo2.org']\n"]}]},{"cell_type":"markdown","source":["### Atividade 03\n","Implemente um Singleton (use a imaginação!!!)"],"metadata":{"id":"t-06pAtKp_or"}},{"cell_type":"markdown","source":["---\n","classe Singleton\n","\n","---"],"metadata":{"id":"baQCzNs4qKQ-"}},{"cell_type":"code","source":["class LivrosLidos():\n","  _instancia = None\n","  _listaLivros = []\n","\n","  def __new__(self):\n","      if self._instancia is None:\n","        self._instancia = super(LivrosLidos, self).__new__(self)\n","      return self._instancia\n","\n","  def addLivro(self, livro):\n","    self._listaLivros.append(livro)\n","\n","  def verLivros (self):\n","    return self._listaLivros"],"metadata":{"id":"kMj0TOBbqI_y","executionInfo":{"status":"ok","timestamp":1698595826964,"user_tz":180,"elapsed":21,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["---\n","teste Cliente\n","\n","---"],"metadata":{"id":"s0RGNqqprrq8"}},{"cell_type":"code","source":["# implementando testes com singleton\n","estantezinha = LivrosLidos()\n","estantezinha.addLivro(\"The Lord of The Rings: The FellowShip of the Ring\")\n","estantezinha.addLivro(\"Happily Ever After\")\n","estantezinha.addLivro(\"Before I Fall\")\n","\n","# imprimindo valores\n","print(f\"Livros Lidos: {estantezinha.verLivros()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9Jlu5edcruAA","executionInfo":{"status":"ok","timestamp":1698595826965,"user_tz":180,"elapsed":21,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}},"outputId":"de9a7c74-c540-4168-9dac-1eaca4067e48"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Livros Lidos: ['The Lord of The Rings: The FellowShip of the Ring', 'Happily Ever After', 'Before I Fall']\n"]}]},{"cell_type":"markdown","source":["### Atiidade 04\n","\n","Suponha que devemos simular o caso em que um usuário liga para a Siri para tocar uma música.\n","Vamos pensar em desenvolver algo sem usar o padrão de projeto “Singleton”. O código poderia ser este\n","que está abaixo.\n","\n","Ao executar o código acima, observe que dois reprodutores de música (players) foram criados e tocavam\n","itens diferentes ao mesmo tempo.\n","\n","Reescreva o código acima implementando o padrão “Singleton”.\n","Depois, execute novo código e veja se funciona. Há uma e apenas uma instância do nosso player na\n","simulação, mesmo que o Siri tenha alterado o item de música. Você deverá ver algo como a figura abaixo."],"metadata":{"id":"hqk0JnUDvJxn"}},{"cell_type":"code","source":["class MusicPlayer():\n","    _instance = None\n","\n","    def __new__(cls):\n","        if cls._instance is None:\n","            cls._instance = super(MusicPlayer, cls).__new__(cls)\n","            cls._instance.__initialized = False\n","        return cls._instance\n","\n","    def __init__(self):\n","        if not self.__initialized:\n","            self.__currentItem = \"\"\n","            self.__musicLength = 0\n","            self.__timer = 0\n","            self.__thread = th.Thread(target=self.playsound)\n","            self.__initialized = True\n","\n","    def play(self):\n","        if self.__thread.is_alive():\n","            pass\n","        else:\n","            self.__thread = th.Thread(target=self.playsound)\n","            self.__thread.start()\n","\n","    def updateItem(self, musicfile, length):\n","        self.__currentItem = musicfile\n","        self.__musicLength = length\n","        self.__timer = 0\n","\n","    def playsound(self):\n","        while self.__timer <= self.__musicLength:\n","            print(\" -- playing {} --- {}.00/{}.00\".format(self.__currentItem, self.__timer, self.__musicLength))\n","            time.sleep(1)\n","            self.__timer += 1\n","        print(\"{} playing thread has ended\".format(self.__currentItem))\n","\n","class Siri():\n","    def __init__(self):\n","        pass\n","\n","    def runCMD(self, cmd):\n","        if cmd.startswith(\"play music\"):\n","            music = cmd.replace(\"play music\", \"\").strip()\n","            player = MusicPlayer()\n","            player.updateItem(music, album[music])\n","            player.play()"],"metadata":{"id":"OzstIxUVYDem","executionInfo":{"status":"ok","timestamp":1698596056655,"user_tz":180,"elapsed":385,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["album = {\"Love Story\": 10, \"Angels\": 12, \"Elle\": 18}\n","musicList = list(album.keys())\n","siri = Siri()\n","siri.runCMD(\"play music {}\".format(musicList[0]))\n","time.sleep(4)\n","siri.runCMD(\"play music {}\".format(musicList[1]))\n","mainTime = 0\n","\n","while mainTime < 20:\n","    mainTime += 1\n","    time.sleep(1)\n","print(\"End of simulation\")"],"metadata":{"id":"Lv_EYi-aaB9O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698596086672,"user_tz":180,"elapsed":24457,"user":{"displayName":"Maria Fernanda Caetano","userId":"09440733070024931895"}},"outputId":"ebdbc8c3-7bd3-4341-f081-a6b255ab52c2"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":[" -- playing Love Story --- 0.00/10.00\n"," -- playing Love Story --- 1.00/10.00\n"," -- playing Love Story --- 2.00/10.00\n"," -- playing Love Story --- 3.00/10.00\n"," -- playing Angels --- 1.00/12.00\n"," -- playing Angels --- 2.00/12.00\n"," -- playing Angels --- 3.00/12.00\n"," -- playing Angels --- 4.00/12.00\n"," -- playing Angels --- 5.00/12.00\n"," -- playing Angels --- 6.00/12.00\n"," -- playing Angels --- 7.00/12.00\n"," -- playing Angels --- 8.00/12.00\n"," -- playing Angels --- 9.00/12.00\n"," -- playing Angels --- 10.00/12.00\n"," -- playing Angels --- 11.00/12.00\n"," -- playing Angels --- 12.00/12.00\n","Angels playing thread has ended\n","End of simulation\n"]}]}]}